# ============================================================================
# EDGE AGENT CONFIGURATION
# ============================================================================
# Configuración del Edge Agent para detección de objetos con AI en tiempo real
# Este servicio captura video, ejecuta inferencia y gestiona sesiones de grabación


# ============================================================================
# LOGGING
# ============================================================================
# Nivel de logs: debug | info | warn | error
# - debug: Todos los logs (incluye frames procesados, eventos del bus)
# - info: Operaciones importantes (cambios de estado, detecciones)
# - warn: Advertencias (sin impacto en operación)
# - error: Solo errores críticos
LOG_LEVEL=info


# ============================================================================
# DEVICE IDENTIFICATION
# ============================================================================
# ID único del dispositivo edge (usado en logs y métricas)
DEVICE_ID=cam-local


# ============================================================================
# VIDEO SOURCE (Camera)
# ============================================================================
# Configuración de la fuente de video (cámara USB o RTSP)

# Tipo de fuente: v4l2 (USB/integrada) | rtsp (cámara IP)
SOURCE_KIND=v4l2

# URI de la fuente
# - Para v4l2: /dev/video0, /dev/video1, etc.
# - Para RTSP: rtsp://usuario:pass@192.168.1.100:554/stream
SOURCE_URI=/dev/video0

# Resolución de captura (DEBE ser par para formato I420)
SOURCE_WIDTH=1280
SOURCE_HEIGHT=720

# FPS de captura constante (debe ser >= AI_FPS_ACTIVE)
SOURCE_FPS_HUB=15

# Path del socket SHM compartido (shared memory para GStreamer)
SOURCE_SOCKET_PATH=/dev/shm/cam_raw.sock

# Tamaño del buffer SHM en MB (ajustar según resolución y FPS)
# Fórmula aproximada: (width * height * 1.5 * fps * 2) / 1MB
SOURCE_SHM_SIZE_MB=128


# ============================================================================
# AI WORKER (Detection Engine)
# ============================================================================
# Configuración del worker de IA (servicio externo vía TCP)

# Conexión al worker
# - Para testing local: localhost
# - Para Docker Compose: worker-ai (nombre del servicio)
AI_WORKER_HOST=worker-ai
AI_WORKER_PORT=7001

# Modelo de detección
# Path al modelo ONNX (relativo al directorio de trabajo del worker)
AI_MODEL_NAME=yolov8n.onnx

# Umbral de confianza mínima (0.0 - 1.0)
# Solo detecciones con score >= umbral serán reportadas
AI_UMBRAL=0.5

# Resolución para inferencia (ancho y alto)
# YOLOv8 acepta múltiples resoluciones, típicamente: 640x640, 640x480, etc.
AI_WIDTH=640
AI_HEIGHT=480

# Filtro de clases relevantes (COCO dataset)
# Solo detecciones de estas clases activarán grabación
# Separar con comas, sin espacios. Ej: person,car,truck
# Clases COCO disponibles: person, bicycle, car, motorcycle, airplane, bus, 
# train, truck, boat, traffic light, fire hydrant, stop sign, parking meter, 
# bench, bird, cat, dog, horse, sheep, cow, elephant, bear, zebra, giraffe, 
# backpack, umbrella, handbag, tie, suitcase, frisbee, skis, snowboard, 
# sports ball, kite, baseball bat, baseball glove, skateboard, surfboard, 
# tennis racket, bottle, wine glass, cup, fork, knife, spoon, bowl, banana, 
# apple, sandwich, orange, broccoli, carrot, hot dog, pizza, donut, cake, 
# chair, couch, potted plant, bed, dining table, toilet, tv, laptop, mouse, 
# remote, keyboard, cell phone, microwave, oven, toaster, sink, refrigerator, 
# book, clock, vase, scissors, teddy bear, hair drier, toothbrush
AI_CLASSES_FILTER=person

# FPS de procesamiento de IA (dual-rate según estado FSM)
# - IDLE: Baja frecuencia para ahorrar CPU cuando no hay actividad
# - ACTIVE: Alta frecuencia durante grabación para máxima precisión
AI_FPS_IDLE=5
AI_FPS_ACTIVE=12

# ============================================================================
# AI PROTOCOL v1 (Binary Protocol Configuration)
# ============================================================================
# Configuración del protocolo v1 para comunicación edge-agent ↔ worker-ai

# Versión del protocolo (debe ser 1)
AI_PROTOCOL_VERSION=1

# Ventana de backpressure (max frames in-flight)
# Controla cuántos frames pueden estar pendientes sin respuesta
AI_MAX_INFLIGHT=4

# Política de envío: LATEST_WINS | FIFO
# - LATEST_WINS: Descarta frames pendientes si no hay créditos (recomendado)
# - FIFO: Espera créditos sin descartar (puede causar latencia)
AI_POLICY=LATEST_WINS

# Formato de píxeles preferido: NV12 | I420
# NV12 es más eficiente (2 planos vs 3)
AI_PREFERRED_PIXEL_FORMAT=NV12

# Codec de fallback: JPEG | NONE
# Si el worker no acepta RAW, usar JPEG comprimido
AI_FALLBACK_CODEC=JPEG

# Intervalo de heartbeat (ms)
# Keepalive bidireccional para detectar desconexiones
AI_HEARTBEAT_INTERVAL_MS=2000

# Timeout de conexión (ms)
# Tiempo sin mensajes antes de reconectar
AI_TIMEOUT_MS=10000


# ============================================================================
# MEDIAMTX (RTSP Streaming Server)
# ============================================================================
# Configuración del servidor RTSP para publicar el stream

# Hostname del servidor MediaMTX
# - Para local: localhost
# - Para Docker: mediamtx (nombre del servicio)
MEDIAMTX_HOST=mediamtx

# Puerto RTSP (default: 8554)
MEDIAMTX_PORT=8554

# Path del stream (se accede vía rtsp://host:port/path)
# Ejemplo: rtsp://localhost:8554/cam-local
MEDIAMTX_PATH=cam-local


# ============================================================================
# FSM (Finite State Machine Timers)
# ============================================================================
# Timers que controlan las transiciones de la máquina de estados
# Estados: IDLE → DWELL → ACTIVE → CLOSING → IDLE

# DWELL: Ventana de confirmación antes de activar grabación
# Evita falsos positivos (ej: sombra detectada como persona)
# Valor recomendado: 500-1000ms
FSM_DWELL_MS=500

# SILENCE: Timeout sin detecciones antes de cerrar sesión
# Si no hay detecciones relevantes por este tiempo → transición a CLOSING
# Valor recomendado: 3000-5000ms
FSM_SILENCE_MS=3000

# POSTROLL: Grabación adicional después de última detección
# Captura contexto posterior (ej: persona saliendo de escena)
# Valor recomendado: 2000-5000ms
FSM_POSTROLL_MS=5000


# ============================================================================
# SESSION STORE (API Backend)
# ============================================================================
# Configuración del servicio de almacenamiento de sesiones y detecciones

# URL base del API
# - Para local: http://localhost:8080
# - Para Docker: http://session-store:8080 (nombre del servicio)
STORE_BASE_URL=http://session-store:8080

# API Key para autenticación (opcional, si el store la requiere)
# STORE_API_KEY=secret

# Batching de detecciones (optimización de red)
# Número máximo de detecciones por batch antes de flush
STORE_BATCH_MAX=50

# Intervalo de flush automático (ms)
# Envía batch aunque no esté lleno cada X ms
STORE_FLUSH_INTERVAL_MS=250


# ============================================================================
# TIMEZONE
# ============================================================================
# Zona horaria para timestamps (ISO 8601)
# Ejemplos: UTC, America/Argentina/Buenos_Aires, Europe/Madrid
TZ=UTC


# ============================================================================
# ADVANCED CONFIGURATION
# ============================================================================

# CAPTURE_FRAMING: Frame framing protocol for NV12 capture
# - raw: Raw binary frames (current default, works reliably)
# - gdp: GStreamer Data Protocol (experimental, may have compatibility issues)
# 
# Note: GDP framing can eliminate split-frame artifacts but may not work
# on all GStreamer versions. Use 'raw' for maximum compatibility.
CAPTURE_FRAMING=raw

# ENCODER_IMPL: JPEG encoder implementation for frame storage
# - sharp: Sharp library (current default, stable)
# - turbojpeg: libjpeg-turbo (experimental, potentially faster)
#
# Note: Both perform YUV→RGB→JPEG conversion for NV12/I420 frames
ENCODER_IMPL=sharp
