syntax = "proto3";

package ai;

// ============================================================================
// Envelope - Mensaje raíz para TCP framing
// ============================================================================
message Envelope {
  oneof msg {
    Request req = 1;
    Response res = 2;
    Heartbeat hb = 3;
  }
}

// ============================================================================
// Request - Mensajes del Agent → Worker
// ============================================================================
message Request {
  oneof kind {
    Init init = 1;
    Frame frame = 2;
    Shutdown shutdown = 3;
  }
}

message Init {
  string model_path = 1;
  uint32 width = 2;
  uint32 height = 3;
  float conf_threshold = 4;
  repeated uint32 classes_filter = 5;  // Opcional: filtrar clases específicas
}

message Frame {
  uint64 seq = 1;             // Secuencia del frame
  string ts_iso = 2;          // Timestamp ISO8601
  uint64 ts_mono_ns = 3;      // Timestamp monotónico en nanosegundos
  uint32 width = 4;
  uint32 height = 5;
  string pix_fmt = 6;         // "RGB" por defecto
  bytes data = 7;             // Frame data (RGB raw)
}

message Shutdown {
  // Solicita shutdown graceful del worker
}

// ============================================================================
// Response - Mensajes del Worker → Agent
// ============================================================================
message Response {
  oneof kind {
    InitOk init_ok = 1;
    Ready ready = 2;
    Result result = 3;
    Error error = 4;
  }
}

message InitOk {
  string runtime = 1;              // "onnxruntime 1.16.3"
  string model_version = 2;        // "yolov8n"
  repeated string class_names = 3; // Todas las clases del modelo
  uint32 max_frame_bytes = 4;      // Límite de payload
  repeated string providers = 5;   // ["CPUExecutionProvider"] o ["CUDAExecutionProvider"]
  string model_id = 6;             // Hash/versión del modelo cargado
  Preprocessing preproc = 7;       // Info de preprocesamiento
}

message Preprocessing {
  string layout = 1;          // "NCHW" o "NHWC"
  repeated float mean = 2;    // Normalización [R, G, B]
  repeated float std = 3;     // Normalización [R, G, B]
  bool letterbox = 4;         // ¿Usa letterbox?
}

message Ready {
  uint64 seq = 1;  // Seq del último frame procesado (crédito para enviar siguiente)
}

message Result {
  uint64 seq = 1;
  string ts_iso = 2;
  uint64 ts_mono_ns = 3;
  repeated Detection detections = 4;
}

message Detection {
  string cls = 1;
  float conf = 2;
  BoundingBox bbox = 3;
  string track_id = 4;  // Opcional: ID de tracking
}

message BoundingBox {
  float x = 1;
  float y = 2;
  float w = 3;
  float h = 4;
}

message Error {
  uint32 code = 1;
  string message = 2;
}

// ============================================================================
// Heartbeat - Keepalive bidireccional
// ============================================================================
message Heartbeat {
  uint64 ts_mono_ns = 1;
}
