services:
  postgres:
    image: postgres:15-alpine
    container_name: tpfinalv3-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: session_store
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TZ: UTC
    ports:
      - "15432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/session-store/migrations:/docker-entrypoint-initdb.d:ro
      # Sincronización de TZ con el host
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mediamtx:
    image: bluenviron/mediamtx:latest-ffmpeg
    container_name: tpfinalv3-mediamtx
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_started
    environment:
      TZ: UTC
    ports:
      - "8554:8554" # RTSP ingest
      - "9996:9996" # Playback API (recordings)
    volumes:
      - ./services/mediamtx/mediamtx.yml:/mediamtx.yml:ro
      - ./data/recordings:/recordings
      # Sincronización de TZ con el host
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  session-store:
    build:
      context: ./services/session-store
    container_name: tpfinalv3-session-store
    restart: unless-stopped
    environment:
      PORT: 8080
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/session_store
      MEDIAMTX_PLAYBACK_BASE_URL: http://localhost:9996
      TZ: UTC
    ports:
      - "8080:8080"
    volumes:
      # Sincronización de TZ con el host
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      postgres:
        condition: service_healthy

  worker-ai:
    build:
      context: ./services/worker-ai
    container_name: tpfinalv3-worker-ai
    restart: unless-stopped
    environment:
      BIND_HOST: 0.0.0.0
      BIND_PORT: 7001
      IDLE_TIMEOUT_SEC: 60
      # Bootstrap opcional (pre-carga modelo al arrancar)
      # BOOTSTRAP_MODEL_PATH: /models/yolov8n.onnx
      # BOOTSTRAP_WIDTH: 640
      # BOOTSTRAP_HEIGHT: 480
      # BOOTSTRAP_CONF: 0.35
      TZ: UTC
    volumes:
      # Directorio de modelos (montar modelos ONNX aquí)
      - ./data/models:/models:ro
      # Sincronización de TZ con el host
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "python3", "healthcheck.py"]
      interval: 10s
      timeout: 2s
      retries: 3

  edge-agent:
    build:
      context: ./services/edge-agent
    container_name: tpfinalv3-edge-agent
    restart: on-failure
    depends_on:
      mediamtx:
        condition: service_started
      session-store:
        condition: service_started
      worker-ai:
        condition: service_healthy
    environment:
      # Device
      DEVICE_ID: cam-local
      
      # Source
      SOURCE_KIND: v4l2
      SOURCE_URI: /dev/video0
      SOURCE_WIDTH: 1280
      SOURCE_HEIGHT: 720
      SOURCE_FPS_HUB: 15
      SOURCE_SOCKET_PATH: /dev/shm/cam_raw.sock
      SOURCE_SHM_SIZE_MB: 128
      # Para RTSP usar: SOURCE_KIND=rtsp y SOURCE_URI=rtsp://cam-ip/stream
      
      # MediaMTX
      MEDIAMTX_HOST: mediamtx
      MEDIAMTX_PORT: 8554
      MEDIAMTX_PATH: cam-local
      
      # FSM
      FSM_DWELL_MS: 500
      FSM_SILENCE_MS: 3000
      FSM_POSTROLL_MS: 5000
      
      # AI
      AI_MODEL_NAME: /models/yolov8n.onnx
      AI_UMBRAL: 0.4
      AI_WIDTH: 640
      AI_HEIGHT: 384
      AI_CLASS_NAMES: person,helmet,vest,vehicle
      AI_CLASSES_FILTER: person,helmet
      AI_FPS_IDLE: 5
      AI_FPS_ACTIVE: 12
      AI_WORKER_HOST: worker-ai
      AI_WORKER_PORT: 7001
      
      # Session Store
      STORE_BASE_URL: http://session-store:8080
      STORE_BATCH_MAX: 50
      STORE_FLUSH_INTERVAL_MS: 250
      
      # Logging
      LOG_LEVEL: info
      
      TZ: UTC
    volumes:
      # Sincronización de TZ con el host
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # Acceso a cámara - Descomentar para producción con cámara física
    # NOTA: Requiere Docker Engine nativo (no Docker Desktop)
    # devices:
    #   - "/dev/video0:/dev/video0"
    #   - "/dev/video1:/dev/video1"
    # group_add:
    #   - "44"  # GID del grupo video del host (verificar con: getent group video)
    # privileged: true
    profiles: [edge]

  web-ui:
    build:
      context: ./services/web-ui
    container_name: tpfinalv3-web-ui
    restart: unless-stopped
    environment:
      PORT: 3000
      SESSION_STORE_URL: http://session-store:8080
      TZ: UTC
    volumes:
      # Sincronización de TZ con el host
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      session-store:
        condition: service_started
    ports:
      - "3000:3000"

volumes:
  postgres_data:
